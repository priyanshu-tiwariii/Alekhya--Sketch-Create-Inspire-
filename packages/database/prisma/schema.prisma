generator client {
  provider = "prisma-client-js"
    output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt      DateTime       @default(now())
  email          String         @unique
  name           String?
  bio            String?
  profilePhoto   String?
  userName       String         @unique
  provider       String
  id             String         @id @default(uuid())
  collaborations Collaborator[] @relation("UserCollaborations")
  createdFiles   CreatedFile[]  @relation("CreatedFiles")
}

model CreatedFile {
  id              String         @id @default(uuid())
  createdAt       DateTime       @default(now())
  createdByUserId String
  name            String
  collaborators   Collaborator[] @relation("Collaborators")
  createdByUser   User           @relation("CreatedFiles", fields: [createdByUserId], references: [id])
  strokes         Stroke[]       @relation("Strokes")
}

model Stroke {
  id         String       @id @default(uuid())
  fileId     String      
  type       String
  x          Float?
  y          Float?
  w          Float?       @default(0)
  h          Float?       @default(0)
  radius     Float?       @default(0)
  text       String?      @default("")
  fontSize   Int?         @default(16)
  fontFamily String?      @default("Arial")
  color      String?      @default("")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  file       CreatedFile  @relation("Strokes", fields: [fileId], references: [id], onDelete: Cascade)
}
model Collaborator {
  id       String      @id @default(uuid())
  fileId   String
  userId   String
  role     Role        @default(USER)
  joinedAt DateTime    @default(now())
  file     CreatedFile @relation("Collaborators", fields: [fileId], references: [id], onDelete: Cascade)
  user     User        @relation("UserCollaborations", fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
  EDITOR
}
